{
  "@context": {
    "dc": "http://dcterms/",
    "owl": "http://www.w3.org/2002/07/owl#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@id": "http://biii.eu/iterative-closest-point-registration",
  "@type": "http://schema.org/SoftwareApplication",
  "http://schema.org/applicationCategory": {
    "@id": "http://edamontology.org/operation__R9Vc5BV3ZMcLHEL6WEceXbY"
  },
  "http://schema.org/citation": {
    "@id": "http://www2.imm.dtu.dk/~jakw/publications/bscthesis.pdf"
  },
  "http://schema.org/dateCreated": "2016-09-15T18:45:05",
  "http://schema.org/dateModified": "2019-10-21T08:53:41",
  "http://schema.org/description": "<p>The ICP algorithm takes two point clouds as an input and return the rigid transformation (rotation matrix R and translation vector T), that best aligns the point clouds. Example: [R,T] = icp(q,p,10); Aligns the points of p to the points q with 10 iterations of the algorithm. The transformation is then applied using R*p + repmat(T,1,length(p)); The file has implemented both point to point and point to plane as well as a couple of other features such as extrapolation, weighting functions, edge point rejection, etc.</p>\r\n",
  "http://schema.org/featureList": {
    "@id": "http://edamontology.org/operation__R9Vc5BV3ZMcLHEL6WEceXbY"
  },
  "http://schema.org/name": "iterative closest point registration",
  "http://schema.org/publisher": [
    "Hans Martin Kjer",
    " Jakob Wilm"
  ]
}