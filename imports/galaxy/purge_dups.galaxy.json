{
    "Conda_id": "purge_dups",
    "Conda_version": "1.2.6",
    "Description": "Purge haplotigs and overlaps in an assembly based on read depth",
    "EDAM_operation": "Genome assembly, Read binning, Scaffolding",
    "EDAM_topic": "Sequence assembly",
    "Galaxy_tool_ids": "purge_dups",
    "Galaxy_wrapper_id": "purge_dups",
    "Galaxy_wrapper_owner": "iuc",
    "Galaxy_wrapper_parsed_folder": "https://github.com/galaxyproject/tools-iuc/tree/main/tools/purge_dups",
    "Galaxy_wrapper_source": "https://github.com/galaxyproject/tools-iuc/tree/master/tools/purge_dups",
    "Galaxy_wrapper_version": "1.2.6",
    "No._of_tool_users_(2022-2023)_(usegalaxy.eu)": 167,
    "Source": "https://github.com/dfguan/purge_dups",
    "Status": "Up-to-date",
    "ToolShed_categories": "Assembly",
    "ToolShed_id": "purge_dups",
    "Total_tool_usage_(usegalaxy.eu)": 16800,
    "bio.tool_description": "Identifying and removing haplotypic duplication in primary genome assemblies | haplotypic duplication identification tool | scripts/pd_config.py: script to generate a configuration file used by run_purge_dups.py | purge haplotigs and overlaps in an assembly based on read depth | Given a primary assembly pri_asm and an alternative assembly hap_asm (optional, if you have one), follow the steps shown below to build your own purge_dups pipeline, steps with same number can be run simultaneously. Among all the steps, although step 4 is optional, we highly recommend our users to do so, because assemblers may produce overrepresented seqeuences. In such a case, The final step 4 can be applied to remove those seqeuences",
    "bio.tool_id": "purge_dups",
    "bio.tool_ids": "purge_dups",
    "bio.tool_name": "purge_dups",
    "https://usegalaxy.eu": "(1/1)",
    "https://usegalaxy.fr": "(0/1)",
    "https://usegalaxy.org": "(1/1)",
    "https://usegalaxy.org.au": "(1/1)"
}
